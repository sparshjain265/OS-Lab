loadi(54,67);	//load module 7 to the memory
loadi(55,68);

loadi(69,11);	//load the idle program to memory
loadi(70,12);

//Setup stack for calling boot module
//boot module uses kernel stack of idle process
SP = 82*512 - 1;	

call MOD_7;	//Call the boot module (MOD_7)

//Managing Page Table for idle process
PTBR = PAGE_TABLE_BASE;
PTLR = 10;
[PTBR + 0] = 63;		//Library
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";	
[PTBR + 4] = -1;		//Heap
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";
[PTBR + 8] = 69;		//Program Code
[PTBR + 9] = "0100";
[PTBR + 10] = 70;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 81;		//Stack
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

//Managing Process Table for idle process
[PROCESS_TABLE + 0 + 1] = 0;						//PID 
[PROCESS_TABLE + 0 + 4] = RUNNING;				//State
[PROCESS_TABLE + 0 + 11] = 82;					//User Area Page
[PROCESS_TABLE + 0 + 12] = 0;						//KPTR Kernal Stack Pointer 
[PROCESS_TABLE + 0 + 13] = 8*512;				//UPTR User Stack Pointer
[PROCESS_TABLE + 0 + 14] = PAGE_TABLE_BASE;	//PTBR
[PROCESS_TABLE + 0 + 15] = 10;					//PTLR
[81 * 512] = [69*512 + 1];							//Entry Point

//Managing System Status Table
[SYSTEM_STATUS_TABLE + 1] = 0;

//Set stack pointer to logical address of user stack of idle process
SP = 8*512;

ireturn;