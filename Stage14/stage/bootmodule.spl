loadi(65, 7);	//load init program to memory 
loadi(66, 8);

loadi(22, 35);	//load INT10 program to memory - exit
loadi(23, 36);

loadi(2, 15);	//load exception handler to memory
loadi(3, 16);

loadi(63, 13);	//Load Library Code from the disk
loadi(64, 14);

loadi(4, 17);	//Load the timer routine
loadi(5, 18);

loadi(16, 29);	//Load INT7 program to memory - write to consol
loadi(17, 30);

loadi(50,63);	//load module 5 to the memory (scheduler)
loadi(51,64);

//Managing Page Table for init process
PTBR = PAGE_TABLE_BASE + 20;	
PTLR = 10;
[PTBR + 0] = 63;		//Library
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";	
[PTBR + 4] = 78;		//Heap
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";
[PTBR + 8] = 65;		//Program Code
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 76;		//Stack
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//Manage Process Table for init process
[PROCESS_TABLE + 16 + 1] = 1;								//PID 
[PROCESS_TABLE + 16 + 4] = CREATED;						//State
[PROCESS_TABLE + 16 + 11] = 80;							//User Area Page
[PROCESS_TABLE + 16 + 12] = 0;							//KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;						//UPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;	//PTBR
[PROCESS_TABLE + 16 + 15] = 10;							//PTLR
[76*512] = [65*512 + 1];									//Entry Point

loadi(83, 69);	//load even program to memory, next free page was 83 
loadi(84, 70);

//Managing Page Table for even process
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;
[PTBR + 0] = 63;		//Library
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";	
[PTBR + 4] = 85;		//Heap
[PTBR + 5] = "0110";
[PTBR + 6] = 86;
[PTBR + 7] = "0110";
[PTBR + 8] = 83;		//Program Code
[PTBR + 9] = "0100";
[PTBR + 10] = 84;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 87;		//Stack
[PTBR + 17] = "0110";
[PTBR + 18] = 88;
[PTBR + 19] = "0110";

//Manage Process Table for even process
[PROCESS_TABLE + 16*2 + 1] = 2;								//PID 
[PROCESS_TABLE + 16*2 + 4] = CREATED;						//State
[PROCESS_TABLE + 16*2 + 11] = 89;							//User Area Page
[PROCESS_TABLE + 16*2 + 12] = 0;								//KPTR
[PROCESS_TABLE + 16*2 + 13] = 8*512;						//UPTR
[PROCESS_TABLE + 16*2 + 14] = PAGE_TABLE_BASE + 40;	//PTBR
[PROCESS_TABLE + 16*2 + 15] = 10;							//PTLR
[87*512] = [83*512 + 1];										//Entry Point

//Set the state of all other entries in the process table as terminated to help the scheduler
[PROCESS_TABLE + 16*3 + 4] = TERMINATED;
[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;

return;