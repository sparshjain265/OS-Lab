loadi(65, 7);	//load init program to memory 
loadi(66, 8);

loadi(22, 35);	//load INT10 program to memory - exit
loadi(23, 36);

loadi(2, 15);	//load exception handler to memory
loadi(3, 16);

loadi(63, 13);	//Load Library Code from the disk
loadi(64, 14);

loadi(4, 17);	//Load the timer routine
loadi(5, 18);

loadi(16, 29);	//Load INT7 program to memory - write to consol
loadi(17, 30);

loadi(50,63);	//load module 5 to the memory (scheduler)
loadi(51,64);

loadi(40, 53);	//load module 0 to the memory (resource manager)
loadi(41, 54);	

loadi(48, 61);	//load module 4 to the memory (device manager)
loadi(49, 62);

loadi(8, 21);	//load consol interrupt handler
loadi(9, 22);

loadi(14, 27);	//load INT6	
loadi(15, 28);

loadi(20, 33);	//load INT9
loadi(21, 34);

loadi(42, 55); //load MOD 1
loadi(43, 56);	

loadi(44, 57);	//load MOD 2
loadi(45, 58); 

loadi(59, 3);	//load inode table and user table
loadi(60, 4);

loadi(6, 19);	//load disk interrupt routine
loadi(7, 20);

loadi(61, 2);	//load disk free list

loadi(18, 31);	//load INT8
loadi(19, 32);

[DISK_STATUS_TABLE] = 0;	//initialize disk status table

[TERMINAL_STATUS_TABLE + 0] = 0;	//initialize terminal status table

//Managing Page Table for init process
PTBR = PAGE_TABLE_BASE + 20;	
PTLR = 10;
[PTBR + 0] = 63;		//Library
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";	
[PTBR + 4] = 78;		//Heap
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";
[PTBR + 8] = 65;		//Program Code
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
[PTBR + 16] = 76;		//Stack
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//Manage Process Table for init process
[PROCESS_TABLE + 16 + 1] = 1;								//PID 
[PROCESS_TABLE + 16 + 4] = CREATED;						//State
[PROCESS_TABLE + 16 + 11] = 80;							//User Area Page
[PROCESS_TABLE + 16 + 12] = 0;							//KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;						//UPTR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;	//PTBR
[PROCESS_TABLE + 16 + 15] = 10;							//PTLR
[76*512] = [65*512 + 1];									//Entry Point

//initialize pre process resource table for init process
alias count R0;
count = 1;
while (count <= 16) do
	[(80 + 1)*512 - count] = -1;
	count = count + 1;
endwhile;

//initialize per process disk map table
[DISK_MAP_TABLE + 16 + 0] = -1;	//user area
[DISK_MAP_TABLE + 16 + 1] = -1;	//unused
[DISK_MAP_TABLE + 16 + 2] = -1;	//heap1
[DISK_MAP_TABLE + 16 + 3] = -1;	//heap2
[DISK_MAP_TABLE + 16 + 4] = 7;	//code1
[DISK_MAP_TABLE + 16 + 5] = 8;	//code2
[DISK_MAP_TABLE + 16 + 6] = -1;	//code3
[DISK_MAP_TABLE + 16 + 7] = -1;	//code4
[DISK_MAP_TABLE + 16 + 8] = -1;	//stack1
[DISK_MAP_TABLE + 16 + 9] = -1;	//stack2

//Set the state of all other entries in the process table as terminated to help the scheduler
[PROCESS_TABLE + 16*2 + 4] = TERMINATED;
[PROCESS_TABLE + 16*3 + 4] = TERMINATED;
[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;

//initialize MEM_FREE_LIST
alias i R0;
i = 0;
while(i < 83) do
	[MEMORY_FREE_LIST + i] = 1;
	i = i + 1;
endwhile;
while(i < 128) do
	[MEMORY_FREE_LIST + i] = 0;
	i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 128 - 82;

return;